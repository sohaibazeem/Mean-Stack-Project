import transpose from'ramda/es/transpose';import Line from'../components/dataset/line';import Column from'../components/dataset/column';import CandleStick from'../components/dataset/candlestick';import OHLC from'../components/dataset/ohlc';import StackGenerator from'../../../../fc-utils/src/stack-generator';import offsetDiverge from'../../../../fc-utils/src/stack-generator/offsets/diverge';import offsetNull from'../../../../fc-utils/src/stack-generator/offsets/null';import{UNDEF,extend2}from'../../../../fc-core/src/lib';const getDataset=a=>'column'===a?Column:'candlestick'===a?CandleStick:'ohlc'===a?OHLC:Line,getSeriesName=a=>a.split(' - ')[0],getMeasureOpName=a=>a.split(' - ').slice(1).join(' - '),getVisibility=a=>a?'visible':'hidden',isOHLC=a=>'ohlc'===a||'candlestick'===a,isPlotStackable=a=>'area'===a||'smooth-area'===a||'step-area'===a||'column'===a;export default(a=>{const b=a.getFromEnv('chart'),c=a.getFromEnv('legendMap'),d=a.config,e=a.getFromEnv('dataSource'),f=e.plotconfig||{},g=a.getFromEnv('ordinalScale'),h=d.isContext?b.config.contextAxesX:b.config.focusAxesX,i=d.isContext?b.config.contextAxesY:b.config.focusAxesY,j=d.isContext,k=d.multiSeriesDatasetMap;j&&d.plotConfigs.forEach(({plots:a})=>{a.forEach(a=>{isOHLC(a.plottype)?(a.value=a.close||a.low||a.high||a.open||[],a.plottype=a.typeinnavigator||'line'):'column'===a.plottype&&(a.plottype=a.typeinnavigator||(1<a.value.length?'area':'line'))})}),d.plotConfigs.forEach(b=>{const e=h[b.x],l=i[b.y],m=e.binDecider,n=e.scale,o=l.scale,p=l.plotstyle||{},q=b.plots.filter(({plottype:a})=>'column'===a).length;let r=0;b.plots.forEach(b=>{let h,i,s,t,u,v,w,x=b.tableInfo,y=x.table,z=x.filterItem,A=l.plot[b.plotInAxisIndex],B=A.style||{},C=A.connectnulldata,D=y.getData(),E=D.data,F=y,G=e.timeFormatterFn,H=[A.value],I={};if(A.group&&(I[A.group.toLowerCase()]=z),h=extend2(extend2({},p),B),!j&&isOHLC(b.plottype)){let a=b.close||b.open||b.high||b.low;(1<a.length||z)&&(b.plottype='line',b.value=a)}if(t=b.plottype,i=f[t]||{},s=f.generic||{},w=getDataset(t),'column'===t&&(u=r++,v=q),isOHLC(t)){const c=transpose([b.open||[b.open],b.high||[b.high],b.low||[b.low],b.close||[b.close]].filter(a=>!!a)),{open:d,high:e,low:f,close:g}=A;d&&H.push(d),e&&H.push(e),f&&H.push(f),g&&H.push(g),1<H.length&&H.shift(),c.forEach(c=>{let d=a.attachChild(w,'dataset');F.on('resultFlushed',a=>{let b=a.data&&a.data.legendInteracted;d.setData({data:a.sender.getData().data,skipLimitCalc:j,legendInteracted:b},!0)}),d.addToEnv('binDecider',m),d.addToEnv('xScale',n),d.addToEnv('yScale',o),d.configure({data:E,scaleX:n,scaleY:o,formatterFn:l.formatterFn,timeFormatterFn:G,styleConfig:h,plotCosmetics:i,genericCosmetics:s,prefix:l.formatLabelPrefix,suffix:l.formatLabelSuffix,indices:[F.indexOf(x.position)].concat(c.map(a=>F.indexOf(a))),primaryColor:!0,type:t,series:b.value,measures:H})})}else if(b.stack&&isPlotStackable(t)){const e=F.indexOf(x.position),f=`${getMeasureOpName(b.value[0])} - sum`,p=new StackGenerator().setValueAccessor((a,b)=>c[getSeriesName(b)].visibility?a[F.indexOf(b)]:0).setKeysAccessor(()=>b.value.filter(a=>0<=F.indexOf(a))).setOffset('log'===o.getType()?offsetNull:offsetDiverge);F.addColumns({name:f,type:'number',calcFn:(a,d)=>b.value.reduce((b,e)=>c[getSeriesName(e)].visibility?b+a[d[e]]:b,0)});let q=p.generate(F.getData().data),r=q.length;F.on('resultFlushed',b=>{q=p.generate(b.sender.getData().data);let d=b.data&&b.data.legendInteracted;if(q.forEach(a=>{let b=z?k[`${z} - ${a.key}`]:k[a.key],g=a.map(a=>[a.data[e],a[0],a[1],a.data[F.indexOf(f)]]),h=b.config.series,i=c[h]&&c[h].visibility;i===UNDEF&&(i=!0),b.setData({visibility:getVisibility(i),data:g,skipLimitCalc:j,legendInteracted:d},!0)}),0===q.length){let b=a.getChildren('dataset');b&&b.forEach(a=>{a.setData({data:[],legendInteracted:d},!0)})}}),q.forEach((b,c)=>{let j=a.attachChild(w,'dataset'),p=getSeriesName(b.key),q=b.map(a=>[a.data[e],a[0],a[1],a.data[F.indexOf(f)]]);A.stack&&(I[A.stack.toLowerCase()]=p),j.addToEnv('binDecider',m),j.addToEnv('xScale',n),j.addToEnv('yScale',o),z?k[`${z} - ${b.key}`]=j:k[b.key]=j,j.configure({data:q,datasetIndex:c,seriesLength:r,scaleX:n,scaleY:o,timeFormatterFn:G,groupIndex:u,totalGroups:v,formatterFn:l.formatterFn,prefix:l.formatLabelPrefix,suffix:l.formatLabelSuffix,styleConfig:h,plotCosmetics:i,genericCosmetics:s,connectNullData:C,indices:[0,2,1,3],primaryColor:g.getRangeValue(p),type:t,series:p,enableMarkers:d.enableMarkers,measures:H,seriesInfo:Object.assign({},I)})})}else b.value.forEach(e=>{let f=a.attachChild(w,'dataset'),k=b.stack?getSeriesName(e):z||getSeriesName(e);F.on('resultFlushed',a=>{let b=f.config.series,d=a.data&&a.data.legendInteracted,e=c[b]&&c[b].visibility;e===UNDEF&&(e=!0),f.setData({visibility:getVisibility(e),data:a.sender.getData().data,skipLimitCalc:j,legendInteracted:d},!0)}),b.stack&&(I[b.stack.toLowerCase()]=k),f.addToEnv('binDecider',m),f.addToEnv('xScale',n),f.addToEnv('yScale',o),f.configure({data:E,scaleX:n,scaleY:o,timeFormatterFn:G,groupIndex:u,totalGroups:v,formatterFn:l.formatterFn,prefix:l.formatLabelPrefix,suffix:l.formatLabelSuffix,styleConfig:h,plotCosmetics:i,genericCosmetics:s,connectNullData:C,indices:[F.indexOf(x.position),F.indexOf(e)],primaryColor:g.getRangeValue(k),type:t,series:k,enableMarkers:d.enableMarkers,measures:H,seriesInfo:Object.assign({},I)})})})})});